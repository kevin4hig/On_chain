import 'package:blockchain_utils/utils/binary/utils.dart';
import 'package:on_chain/on_chain.dart';
import 'api_methods.dart';

void main() async {
  const myCoinModuleByteCode =
      "0xa11ceb0b060000000a01000c020c2403302d045d0c05697707e001be01089e036006fe030f0a8d04050c92043b000c010e02070212021302140002020001030701000002000c01000102010c01000102040c0100010405020005060700000a000100000b020100010d01050100020807080102020b0f100100030f0a01010c03100e01010c04110b0c00020403060509060d040606110208000708050004070b040108000305070805020b030108000b04010800010806010b01010900010800070900020a020a020a020b01010806070805020b040109000b03010900010b03010800010900010608050105010b040108000209000503070b0401090003070805010b02010900010b0201080004436f696e0c436f696e4d65746164617461074d595f434f494e064f7074696f6e0b5472656173757279436170095478436f6e746578740355726c04636f696e0f6372656174655f63757272656e63790b64756d6d795f6669656c6404696e6974046d696e74076d795f636f696e046e6f6e65066f7074696f6e147075626c69635f667265657a655f6f626a6563740f7075626c69635f7472616e736665720673656e646572087472616e736665720a74785f636f6e746578740375726c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020a0208074d595f434f494e0a02010000020109010000000003120b00310607000701070138000a0138010c020c030b0238020b030b012e11073803020101000001070b000b010b0338040b0238050200";
  const regCoinModuleByteCode =
      "0xa11ceb0b060000000a01000e020e28033638046e0e057c810107fd01b60208b304600693050f0aa205050ca70556001401110209020b0217021802190004020001030701000002000c01000102010c01000102050c010001030208000506020006070700000f00010000080201000015020100011001050100020a07080102020c10010100020d1001010004120a01010c04130e01010c05160b0c00030404060709080d080f050606060208000708060004070805070b0301080005070806030b030108000b020108000b04010800010807010b01010900010800080900020a020a020a020b0101080701070806030b040109000b030109000b02010900010b02010800010900010608060105010b0401080002090005010b0301080004070805070b03010900050708060c436f696e4d657461646174610944656e7943617056320844656e794c697374064f7074696f6e07524547434f494e0b5472656173757279436170095478436f6e746578740355726c176164645f616464725f66726f6d5f64656e795f6c69737404636f696e1c6372656174655f726567756c617465645f63757272656e63795f76320964656e795f6c6973741064656e795f6c6973745f76325f6164641364656e795f6c6973745f76325f72656d6f76650b64756d6d795f6669656c6404696e6974046e6f6e65066f7074696f6e147075626c69635f667265657a655f6f626a6563740f7075626c69635f7472616e7366657207726567636f696e1a72656d6f76655f616464725f66726f6d5f64656e795f6c6973740673656e646572087472616e736665720a74785f636f6e746578740375726c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020a020807524547434f494e0a0201000002010e010000000003190b0031060700070107013800090a0138010c030c020c040b0338020b040a012e110938030b020b012e11093804020101000001060b000b010b020b033805020201000001060b000b010b020b0338060200";

  final account = SuiSecp256r1Account(
      SuiSecp256r1PrivateKey.fromBytes(List<int>.filled(32, 12)));
  final publishCommands = SuiCommandPublish(dependencies: [
    SuiAddress("0x1"),
    SuiAddress("0x2")
  ], modules: [
    BytesUtils.fromHexString(myCoinModuleByteCode),
    BytesUtils.fromHexString(regCoinModuleByteCode)
  ]);
  final owner = SuiAddress(
      "0x9bc93515356b1f763a04359c54b9dea70fbbe5e1fd3a39051da5dd8d7beffe8f");
  final transferModule = SuiCommandTransferObjects(
      objects: [SuiArgumentResult(0)], address: SuiArgumentInput(0));
  final gasPrice = await getGasPrice();
  SuiTransactionDataV1 tx = SuiTransactionDataV1(
      expiration: const SuiTransactionExpirationNone(),
      sender: owner,
      gasData: SuiGasData(
          payment: [], owner: owner, price: gasPrice, budget: maxGas),
      kind: SuiTransactionKindProgrammableTransaction(
          SuiProgrammableTransaction(
              inputs: [SuiCallArgPure.address(owner)],
              commands: [publishCommands, transferModule])));
  tx = await dryRunTx(tx);
  tx = await filledGasPayment(tx);
  final ser = tx.serializeSign();
  final signature = account.signTransaction(ser);
  final r = await excuteTx(tx: tx, signatures: [signature]);
  assert(r.effects?.status.status == SuiApiExecutionStatusType.success,
      r.effects?.status.error);

  /// https://suiscan.xyz/devnet/tx/DhTtajLg6SUB5rnh99f7TktSdyWXdRQjDvXj5j2sY5Wr
}
