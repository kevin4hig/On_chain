import 'package:blockchain_utils/utils/string/string.dart';
import 'package:example/example/sui/api_methods.dart';
import 'package:on_chain/on_chain.dart';

void main() async {
  final modules = [
    "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"
  ];
  final account = SuiSecp256r1Account(
      SuiSecp256r1PrivateKey.fromBytes(List<int>.filled(32, 12)));
  // print(account.toAddress());
  // return;
  final publishCommands = SuiCommandPublish(
      dependencies: [SuiAddress("0x1"), SuiAddress("0x2")],
      modules: modules
          .map((e) => StringUtils.encode(e, type: StringEncoding.base64))
          .toList());
  final owner = SuiAddress(
      "0x9bc93515356b1f763a04359c54b9dea70fbbe5e1fd3a39051da5dd8d7beffe8f");
  final transferModule = SuiCommandTransferObjects(
      objects: [SuiArgumentResult(0)], address: SuiArgumentInput(0));
  final gasPrice = await getGasPrice();
  SuiTransactionDataV1 tx = SuiTransactionDataV1(
      expiration: const SuiTransactionExpirationNone(),
      sender: owner,
      gasData: SuiGasData(
          payment: [], owner: owner, price: gasPrice, budget: maxGas),
      kind: SuiTransactionKindProgrammableTransaction(
          SuiProgrammableTransaction(
              inputs: [SuiCallArgPure.address(owner)],
              commands: [publishCommands, transferModule])));
  tx = await dryRunTx(tx);
  tx = await filledGasPayment(tx);
  final ser = tx.serializeSign();
  final signature = account.signTransaction(ser);
  final r = await excuteTx(tx: tx, signatures: [signature]);
  assert(r.effects?.status.status == SuiApiExecutionStatusType.success,
      r.effects?.status.error);
}
